apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
}

android {
    compileSdk 34

    namespace 'com.iterable.iterableapi.testapp'
    testNamespace 'iterable.com.iterableapi'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            enableAndroidTestCoverage true
        }
    }

    testOptions.unitTests.includeAndroidResources = true

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain(17)
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.fragment:fragment:1.8.5'
    androidTestImplementation 'androidx.fragment:fragment-testing:1.8.5'

    implementation project(':iterableapi')
    implementation project(':iterableapi-ui')

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:runner:1.6.2'
    testImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    testImplementation 'androidx.test.ext:junit:1.2.1'
    testImplementation 'androidx.test:rules:1.6.1'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.robolectric:robolectric:4.14.1'
    testImplementation 'org.robolectric:shadows-playservices:4.14.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    androidTestImplementation 'org.mockito:mockito-android:4.8.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.2.2'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.6.1'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoDebugTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "reporting"
    description = "Generate unified Jacoco code coverage report"
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    def fileFilter = [
            '**/*Test*.*',
            '**/AutoValue_*.*',
            '**/*JavascriptBridge.class',
            '**/R.class',
            '**/R$*.class',
            '**/Manifest*.*',
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/*$ViewBinder*.*',
            '**/*$ViewInjector*.*',
            '**/Lambda$*.class',
            '**/Lambda.class',
            '**/*Lambda.class',
            '**/*Lambda*.class',
            '**/*$InjectAdapter.class',
            '**/*$ModuleAdapter.class',
            '**/*$ViewInjector*.class',
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"
    def mainKotlinSrc = "${project.projectDir}/src/main/kotlin"

    sourceDirectories.setFrom(files([mainSrc, mainKotlinSrc]))
    classDirectories.setFrom(files([debugTree, kotlinDebugTree]))
    
    // Only include unit test execution data by default
    def execData = fileTree(dir: "$buildDir", includes: ["jacoco/testDebugUnitTest.exec"])
    
    // Add instrumentation test data if available
    def instrumentationData = fileTree(dir: "$buildDir", includes: ["outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec"])
    if (instrumentationData.files.size() > 0) {
        execData.include(instrumentationData.includes)
    }
    
    executionData.setFrom(execData)
}

tasks.matching { it.name.contains('jacocoDebugAndroidTestReport') }.all { task ->
    task.enabled = false
}