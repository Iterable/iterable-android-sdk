/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return libraryVersion.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def keyID = System.getenv('ORG_GRADLE_PROJECT_SIGNING_KEY_ID')
def signing_password = System.getenv('ORG_GRADLE_PROJECT_SIGNING_PASSWORD')
def nexus_username = System.getenv('ORG_GRADLE_PROJECT_NEXUS_USERNAME')
def nexus_password = System.getenv('ORG_GRADLE_PROJECT_NEXUS_PASSWORD')

println "Debug: Using GPG key ID: ${keyID}"

ext."signing.keyId" = keyID
ext."signing.password" = signing_password

publishing {
    publications {
        release(MavenPublication) {
            groupId = GROUP
            artifactId = libraryName
            version = libraryVersion

            afterEvaluate {
                from components.release
            }

            pom {
                name = libraryName
                packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = isReleaseBuild() ? getReleaseRepositoryUrl() : getSnapshotRepositoryUrl()
            credentials {
                username = nexus_username
                password = nexus_password
            }
        }
    }
}

signing {
    required { isReleaseBuild() }
    sign publishing.publications.release
}

tasks.register('uploadArchives') {
    dependsOn publishReleasePublicationToOSSRHRepository
}

tasks.register('androidSourcesJar', Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}