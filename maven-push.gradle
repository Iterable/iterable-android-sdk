/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

def isReleaseBuild() {
    return libraryVersion.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

def keyID = properties.getProperty("signing.keyId")
def signing_password = properties.getProperty("signing.password")
def keyRingLocation = properties.getProperty("signing.secretKeyRingFile")
def nexus_username = properties.getProperty("NEXUS_USERNAME")
def nexus_password = properties.getProperty("NEXUS_PASSWORD")

ext."signing.keyId" = keyID
ext."signing.secretKeyRingFile" = keyRingLocation
ext."signing.password" = signing_password

afterEvaluate { project ->
    publishing {
        publications {
            release(MavenPublication) {
                groupId = GROUP
                artifactId = libraryName
                version = libraryVersion

                afterEvaluate {
                    from components.release
                }

                pom {
                    name = libraryName
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
        repositories {
            maven {
                name = "OSSRH"
                url = getReleaseRepositoryUrl()
                credentials {
                    username = nexus_username
                    password = nexus_password
                }
            }
        }
    }

    signing {
//        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        required true
        sign publishing.publications.release
    }

    task uploadArchives {
        dependsOn publishReleasePublicationToOSSRHRepository
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    artifacts {
        archives androidSourcesJar
    }
}