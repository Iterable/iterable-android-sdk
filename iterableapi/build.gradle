apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'checkstyle'

android {
    compileSdk 34

    namespace 'com.iterable.iterableapi'
    testNamespace 'iterable.com.iterableapi'

    buildFeatures {
        buildConfig = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34

        buildConfigField "String", "ITERABLE_SDK_VERSION", "\"3.5.15\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    publishing {
        multipleVariants {
            allVariants()
            withJavadocJar()
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            manifestPlaceholders = [usesCleartextTraffic: "false"]
        }
        debug {
            enableAndroidTestCoverage true
            multiDexEnabled true
            manifestPlaceholders = [usesCleartextTraffic: "true"]
        }
    }

    testOptions.unitTests.all {
        testLogging {
            exceptionFormat "full"
        }
    }

    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'androidx.appcompat:appcompat:1.7.0'
    api 'androidx.annotation:annotation:1.9.0'
    api 'com.google.firebase:firebase-messaging:20.3.0'
    implementation "androidx.security:security-crypto-ktx:1.1.0-alpha06"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test:runner:1.6.2'
    testImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    testImplementation 'androidx.test.ext:junit:1.2.1'
    testImplementation 'androidx.test:rules:1.6.1'
    testImplementation 'org.mockito:mockito-core:4.8.0'
    testImplementation 'org.mockito:mockito-inline:4.8.0'
    testImplementation 'org.robolectric:robolectric:4.14.1'
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation project(':iterableapi')

    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.6.1'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
    androidTestImplementation 'org.mockito:mockito-android:4.8.0'
}

ext {
    libraryName = 'iterableapi'
    libraryVersion = '3.5.15'
}

if (hasProperty("mavenPublishEnabled")) {
    apply from: '../maven-push.gradle'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    excludes = ['**/*.kt']
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    exclude '**/*.kt'
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

// A hack to import the classpath and BuildConfig into the javadoc task
afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
    javadoc.classpath += files(android.libraryVariants.collect { variant -> "build/generated/source/r/${variant.flavorName}/${variant.buildType.name}" })
    javadoc.classpath += files(android.libraryVariants.collect { variant -> "build/generated/source/buildConfig/${variant.flavorName}/${variant.buildType.name}" })
}
