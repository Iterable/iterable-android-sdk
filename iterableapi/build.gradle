apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.hiya.jacoco-android'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27

        buildConfigField "String", "ITERABLE_SDK_VERSION", "\"3.4.4\""

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
            multiDexEnabled true
        }
    }
    testOptions.unitTests.all {
        testLogging {
            exceptionFormat "full"
        }
    }
    testOptions.unitTests.includeAndroidResources = true
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api 'androidx.legacy:legacy-support-v4:1.0.0'
    api 'androidx.appcompat:appcompat:1.0.0'
    api 'androidx.annotation:annotation:1.0.0'
    api 'com.google.firebase:firebase-messaging:20.3.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:runner:1.3.0'
    testImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'androidx.test:rules:1.3.0'
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'org.robolectric:shadows-playservices:4.4'
    testImplementation 'org.khronos:opengl-api:gl1.1-android-2.1_r1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.2.2'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.2.2'
    androidTestImplementation 'org.mockito:mockito-android:3.0.0'
}

ext {
    publishedGroupId = 'com.iterable'
    libraryName = 'iterableapi'
    artifact = 'iterableapi'

    libraryDescription = 'Iterable Android SDK'

    siteUrl = 'https://github.com/Iterable/iterable-android-sdk'
    gitUrl = 'https://github.com/Iterable/iterable-android-sdk.git'

    libraryVersion = '3.4.4'

    developerId = 'davidtruong'
    developerName = 'David Truong'
    developerEmail = 'dt@iterable.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
if(hasProperty("mavenPublishEnabled")) {
    apply from: '../maven-push.gradle'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

// A hack to import the classpath and BuildConfig into the javadoc task
afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
    javadoc.classpath += files(android.libraryVariants.collect { variant -> "build/generated/source/r/${variant.flavorName}/${variant.buildType.name}" })
    javadoc.classpath += files(android.libraryVariants.collect { variant -> "build/generated/source/buildConfig/${variant.flavorName}/${variant.buildType.name}" })
}
