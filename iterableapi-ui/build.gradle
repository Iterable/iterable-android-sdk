apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            testCoverageEnabled true
        }
    }
}

dependencies {
    api project(':iterableapi')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation "com.github.bumptech.glide:glide:4.8.0"
    implementation 'com.google.android.material:material:1.2.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
}

ext {
    publishedGroupId = 'com.iterable'
    libraryName = 'iterableapi-ui'
    artifact = 'iterableapi-ui'

    libraryDescription = 'Iterable Android SDK - UI'

    siteUrl = 'https://github.com/Iterable/iterable-android-sdk'
    gitUrl = 'https://github.com/Iterable/iterable-android-sdk.git'

    libraryVersion = '3.5.0-beta1'

    developerId = 'davidtruong'
    developerName = 'David Truong'
    developerEmail = 'dt@iterable.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'

if (hasProperty("mavenPublishEnabled")) {
    apply from: '../maven-push.gradle'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    exclude '**/*.kt'
}

// A hack to import the classpath and BuildConfig into the javadoc task
afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
    javadoc.classpath += files(android.libraryVariants.collect { variant -> "build/generated/source/r/${variant.flavorName}/${variant.buildType.name}" })
    javadoc.classpath += files(android.libraryVariants.collect { variant -> "build/generated/source/buildConfig/${variant.flavorName}/${variant.buildType.name}" })
}
