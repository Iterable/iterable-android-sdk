name: In-App Message E2E Tests

on:
  push:
    branches: [ InApp-Display-E2E ]
  pull_request:
    branches: [ InApp-Display-E2E, master, develop ]
  workflow_dispatch:
    inputs:
      use-cached-apks:
        description: 'Use cached APKs to speed up builds'
        required: false
        type: boolean
        default: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  inapp-e2e-tests:
    name: In-App Message E2E Tests
    runs-on: macos-13   # Intel host → HVF works, emulator boots
    
    strategy:
      matrix:
        api-level: [34] # MVP testing on most relevant API level only
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
          
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
          
      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          echo "ndk.dir=$ANDROID_SDK_ROOT/ndk" >> local.properties
          
      - name: Setup Google Services Configuration
        run: |
          echo "Setting up Google Services configuration for CI..."
          if [ ! -f "integration-tests/google-services.json" ]; then
            echo "Creating google-services.json from template..."
            cp integration-tests/google-services.json.template integration-tests/google-services.json
          fi
          echo "Google Services configuration ready"
          
      - name: Restore Build Cache
        id: build-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
            integration-tests/build/outputs/apk/
            app/build/outputs/apk/
            iterableapi/build/outputs/aar/
          key: build-cache-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties', '**/*.kt', '**/*.java', '**/build.gradle', 'gradle.properties') }}
          restore-keys: |
            build-cache-${{ runner.os }}-

      - name: Build Test APKs
        run: |
          echo "Building test APKs..."
          ./gradlew :integration-tests:assembleDebug :integration-tests:assembleDebugAndroidTest --no-daemon
      
      - name: Save Build Cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.gradle/wrapper
            ~/.gradle/caches
            integration-tests/build/outputs/apk/
            app/build/outputs/apk/
            iterableapi/build/outputs/aar/
          key: build-cache-${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties', '**/*.kt', '**/*.java', '**/build.gradle', 'gradle.properties') }}
      
      - name: Restore AVD Cache
        uses: actions/cache/restore@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-reactivecircus-${{ matrix.api-level }}
      
      - name: Create AVD Snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -dns-server 8.8.8.8 -netdelay none -netspeed full
          disable-animations: false
          script: echo "AVD snapshot created for caching"
      
      - name: Save AVD Cache
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-reactivecircus-${{ matrix.api-level }}
            
      - name: Run In-App Message E2E Test
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: google_apis
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none -dns-server 8.8.8.8 -netdelay none -netspeed full
          disable-animations: true
          script: ./integration-tests/run_tests_ci.sh com.iterable.integration.tests.InAppMessageIntegrationTest testInAppMessageMVP
        env:
          ITERABLE_API_KEY: ${{ secrets.BCIT_ITERABLE_API_KEY }}
          ITERABLE_SERVER_API_KEY: ${{ secrets.BCIT_ITERABLE_SERVER_API_KEY }}
          ITERABLE_TEST_USER_EMAIL: ${{ secrets.BCIT_ITERABLE_TEST_USER_EMAIL }}
      
      - name: Upload Test Screenshots and Recording
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-screenshots-api-${{ matrix.api-level }}
          path: /tmp/test-screenshots/
          retention-days: 7
            
      # - name: Generate Test Report
      #   if: always()
      #   run: |
      #     echo "Generating E2E test report..."
      #     ./gradlew :integration-tests:jacocoIntegrationTestReport
          
      # - name: Collect Test Logs
      #   if: always()
      #   run: |
      #     echo "Collecting E2E test logs..."
      #     adb logcat -d > integration-tests/build/e2e-test-logs.txt
          
      #     # Also collect specific test logs
      #     adb logcat -d | grep -E "(InAppMessageIntegrationTest|BaseIntegrationTest|IterableApi)" > integration-tests/build/inapp-specific-logs.txt
          
      # - name: Take Screenshots for Debugging
      #   if: always()
      #   run: |
      #     echo "Taking screenshots for debugging..."
      #     mkdir -p integration-tests/screenshots
      #     adb shell screencap -p /sdcard/screenshot.png
      #     adb pull /sdcard/screenshot.png integration-tests/screenshots/final-state-api-${{ matrix.api-level }}.png
          
      # - name: Upload Test Results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: inapp-e2e-test-results-api-${{ matrix.api-level }}
      #     path: |
      #       integration-tests/build/reports/
      #       integration-tests/build/outputs/
      #       integration-tests/build/e2e-test-logs.txt
      #       integration-tests/build/inapp-specific-logs.txt
            
      # - name: Upload Coverage Report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: inapp-e2e-coverage-api-${{ matrix.api-level }}
      #     path: integration-tests/build/reports/jacoco/
          
      # - name: Upload Screenshots
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: inapp-e2e-screenshots-api-${{ matrix.api-level }}
      #     path: integration-tests/screenshots/
          
      # - name: Cleanup
      #   if: always()
      #   run: |
      #     echo "Test cleanup completed"
          
  # test-summary:
  #   name: Test Summary
  #   runs-on: ubuntu-latest
  #   needs: inapp-e2e-tests
  #   if: always()
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
        
  #     - name: Download Test Results
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: inapp-e2e-test-results-api-34
  #         path: test-results/
          
  #     - name: Generate Test Summary
  #       run: |
  #         echo "## In-App Message E2E Test Results" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### Test Execution Summary" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Branch**: InApp-Display-E2E" >> $GITHUB_STEP_SUMMARY
  #         echo "- **API Level Tested**: 34" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Test Method**: testInAppMessageMVP" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Test Type**: E2E Integration Test" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### E2E Test Scenarios" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ User Sign-in Verification" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ In-App Message Trigger" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ Message Display Verification" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ Button Click Interaction" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ Message Dismissal" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### Artifacts Available" >> $GITHUB_STEP_SUMMARY
  #         echo "- Test execution reports" >> $GITHUB_STEP_SUMMARY
  #         echo "- Code coverage reports" >> $GITHUB_STEP_SUMMARY
  #         echo "- Debug screenshots" >> $GITHUB_STEP_SUMMARY
  #         echo "- Detailed test logs" >> $GITHUB_STEP_SUMMARY
