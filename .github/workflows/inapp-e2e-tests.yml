name: In-App Message E2E Tests

on:
  push:
    branches: [ InApp-Display-E2E ]
  pull_request:
    branches: [ InApp-Display-E2E, master, develop ]
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  inapp-e2e-tests:
    name: In-App Message E2E Tests
    runs-on: macos-13   # Intel host → HVF works, emulator boots
    
    strategy:
      matrix:
        api-level: [34] # MVP testing on most relevant API level only
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
          
      - name: Create local.properties
        run: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
          echo "ndk.dir=$ANDROID_SDK_ROOT/ndk" >> local.properties
          
      - name: Setup Google Services Configuration
        run: |
          echo "Setting up Google Services configuration for CI..."
          if [ ! -f "integration-tests/google-services.json" ]; then
            echo "Creating google-services.json from template..."
            cp integration-tests/google-services.json.template integration-tests/google-services.json
          fi
          echo "Google Services configuration ready"
          
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: AVD Cache
        uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ runner.os }}
      
      - name: Install AVD for API ${{ matrix.api-level }}
        if: steps.avd-cache.outputs.cache-hit != 'true'
        run: |
          echo "Installing system image for API level ${{ matrix.api-level }}..."
          sdkmanager "system-images;android-${{ matrix.api-level }};google_apis;x86_64"
          echo "Creating AVD..."
          echo "no" | avdmanager create avd \
            -n test_api_${{ matrix.api-level }} \
            -k "system-images;android-${{ matrix.api-level }};google_apis;x86_64" \
            -c 2048M \
            -f
          
          echo "Creating initial snapshot..."
          # Boot emulator once to create snapshot
          $ANDROID_SDK_ROOT/emulator/emulator -avd test_api_${{ matrix.api-level }} -no-window -gpu swiftshader_indirect -no-audio -no-boot-anim &
          EMULATOR_PID=$!
          
          # Wait for boot
          adb wait-for-device
          timeout=600
          elapsed=0
          while [ "$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')" != "1" ]; do
            if [ $elapsed -ge $timeout ]; then
              echo "Timeout creating snapshot"
              kill $EMULATOR_PID || true
              exit 1
            fi
            sleep 5
            elapsed=$((elapsed + 5))
            echo "Waiting for initial boot... (${elapsed}s)"
          done
          
          echo "Boot complete, creating snapshot..."
          sleep 10
          adb emu avd snapshot save default_boot
          sleep 5
          adb emu kill
          sleep 5
          
          echo "Snapshot created successfully"
      
      - name: Build Test APKs
        run: |
          echo "Building test APKs..."
          ./gradlew :integration-tests:assembleDebug :integration-tests:assembleDebugAndroidTest --no-daemon
            
      - name: Run In-App Message E2E Test
        run: |
          echo "Running In-App Message MVP test..."
          
          # Start logcat in background for crash debugging
          adb logcat > /tmp/test-logcat.log 2>&1 &
          LOGCAT_PID=$!
          
          # Run test using the CI runner script
          ./integration-tests/run_tests_ci.sh \
            com.iterable.integration.tests.InAppMessageIntegrationTest \
            testInAppMessageMVP \
            --avd test_api_${{ matrix.api-level }} || {
              echo "Test failed! Collecting logs..."
              kill $LOGCAT_PID 2>/dev/null || true
              
              echo "=== EMULATOR BOOT LOGS ==="
              cat /tmp/emulator.log 2>/dev/null || echo "No emulator logs found"
              echo "=== END EMULATOR LOGS ==="
              
              echo "=== TEST CRASH LOGS ==="
              tail -100 /tmp/test-logcat.log 2>/dev/null || echo "No test logs found"
              echo "=== END CRASH LOGS ==="
              
              exit 1
            }
          
          # Stop logcat
          kill $LOGCAT_PID 2>/dev/null || true
        env:
          ITERABLE_API_KEY: ${{ secrets.BCIT_ITERABLE_API_KEY }}
          ITERABLE_SERVER_API_KEY: ${{ secrets.BCIT_ITERABLE_SERVER_API_KEY }}
          ITERABLE_TEST_USER_EMAIL: ${{ secrets.BCIT_ITERABLE_TEST_USER_EMAIL }}
            
      # - name: Generate Test Report
      #   if: always()
      #   run: |
      #     echo "Generating E2E test report..."
      #     ./gradlew :integration-tests:jacocoIntegrationTestReport
          
      # - name: Collect Test Logs
      #   if: always()
      #   run: |
      #     echo "Collecting E2E test logs..."
      #     adb logcat -d > integration-tests/build/e2e-test-logs.txt
          
      #     # Also collect specific test logs
      #     adb logcat -d | grep -E "(InAppMessageIntegrationTest|BaseIntegrationTest|IterableApi)" > integration-tests/build/inapp-specific-logs.txt
          
      # - name: Take Screenshots for Debugging
      #   if: always()
      #   run: |
      #     echo "Taking screenshots for debugging..."
      #     mkdir -p integration-tests/screenshots
      #     adb shell screencap -p /sdcard/screenshot.png
      #     adb pull /sdcard/screenshot.png integration-tests/screenshots/final-state-api-${{ matrix.api-level }}.png
          
      # - name: Upload Test Results
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: inapp-e2e-test-results-api-${{ matrix.api-level }}
      #     path: |
      #       integration-tests/build/reports/
      #       integration-tests/build/outputs/
      #       integration-tests/build/e2e-test-logs.txt
      #       integration-tests/build/inapp-specific-logs.txt
            
      # - name: Upload Coverage Report
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: inapp-e2e-coverage-api-${{ matrix.api-level }}
      #     path: integration-tests/build/reports/jacoco/
          
      # - name: Upload Screenshots
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: inapp-e2e-screenshots-api-${{ matrix.api-level }}
      #     path: integration-tests/screenshots/
          
      # - name: Cleanup
      #   if: always()
      #   run: |
      #     echo "Test cleanup completed"
          
  # test-summary:
  #   name: Test Summary
  #   runs-on: ubuntu-latest
  #   needs: inapp-e2e-tests
  #   if: always()
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
        
  #     - name: Download Test Results
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: inapp-e2e-test-results-api-34
  #         path: test-results/
          
  #     - name: Generate Test Summary
  #       run: |
  #         echo "## In-App Message E2E Test Results" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### Test Execution Summary" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Branch**: InApp-Display-E2E" >> $GITHUB_STEP_SUMMARY
  #         echo "- **API Level Tested**: 34" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Test Method**: testInAppMessageMVP" >> $GITHUB_STEP_SUMMARY
  #         echo "- **Test Type**: E2E Integration Test" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### E2E Test Scenarios" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ User Sign-in Verification" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ In-App Message Trigger" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ Message Display Verification" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ Button Click Interaction" >> $GITHUB_STEP_SUMMARY
  #         echo "- ✅ Message Dismissal" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "### Artifacts Available" >> $GITHUB_STEP_SUMMARY
  #         echo "- Test execution reports" >> $GITHUB_STEP_SUMMARY
  #         echo "- Code coverage reports" >> $GITHUB_STEP_SUMMARY
  #         echo "- Debug screenshots" >> $GITHUB_STEP_SUMMARY
  #         echo "- Detailed test logs" >> $GITHUB_STEP_SUMMARY
